<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>8节点六面体单元的构造和数值积分(1)：完全积分</title>
    <url>/2024/07/21/8%E8%8A%82%E7%82%B9%E5%85%AD%E9%9D%A2%E4%BD%93%E5%8D%95%E5%85%83%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E6%95%B0%E5%80%BC%E7%A7%AF%E5%88%861%EF%BC%9A%E5%AE%8C%E5%85%A8%E7%A7%AF%E5%88%86/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>使用有限元方法对三维实体模型进行分析时，同样网格尺寸条件下，相比于四面体单元，六面体单元网格更少、效率和精度更高。</p>
<p>而不管是四面体单元还是六面体单元，都存在一阶和二阶之分，一阶单元精度不如二阶单元，但效率比二阶单元高。</p>
<p>在这篇文章和接下来几篇文章，我会介绍一下一阶六面体单元，即8节点六面体单元的构造及其积分方法，包括：</p>
<ul>
<li>完全积分方法</li>
<li>选择减缩积分方法</li>
<li>附加9自由度的非协调模式积分方法</li>
<li>附加13自由度的非协调模式积分方法</li>
<li>减缩积分方法</li>
</ul>
<h2 id="单元构造">单元构造</h2>
<h3 id="刚度矩阵">刚度矩阵</h3>
<p>三维实体单元的单元刚度矩阵为： <span class="math display">\[
\mathbf{k}_e = \int_{V_e}{\mathbf{B}^T \mathbf{DB}} \mathrm{d}V \tag{1}
\]</span></p>
<p>其中，<span class="math inline">\(\mathbf{D}\)</span> 为弹性矩阵，由材料的弹性模量 <span class="math inline">\(E\)</span> 和泊松比 <span class="math inline">\(\nu\)</span> 确定， <span class="math display">\[
\mathbf{D} = \frac{E(1 - \nu)}{(1 + \nu)(1 - 2 \nu)} \begin{bmatrix}
    1 &amp; \frac{\nu}{1 - \nu} &amp; \frac{\nu}{1 - \nu} &amp; 0 &amp; 0 &amp; 0 \\
    \frac{\nu}{1 - \nu} &amp; 1 &amp; \frac{\nu}{1 - \nu} &amp; 0 &amp; 0 &amp; 0 \\
    \frac{\nu}{1 - \nu} &amp; \frac{\nu}{1 - \nu} &amp; 1 &amp; 0 &amp; 0 &amp; 0 \\
    0 &amp; 0 &amp; 0 &amp; \frac{1 - 2 \nu}{2(1 - \nu)} &amp; 0 &amp; 0 \\
    0 &amp; 0 &amp; 0 &amp; 0 &amp; \frac{1 - 2 \nu}{2(1 - \nu)} &amp; 0 \\
    0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; \frac{1 - 2 \nu}{2(1 - \nu)} \\
\end{bmatrix} \tag{2}
\]</span></p>
<p><span class="math inline">\(\mathbf{B}\)</span> 为应变矩阵， <span class="math display">\[
\mathbf{B} = \mathbf{LN} \tag{3}
\]</span></p>
<p>其中，<span class="math inline">\(\mathbf{L}\)</span> 为微分算子， <span class="math display">\[
\mathbf{L} = 
    \begin{bmatrix}
        \frac{\partial}{\partial x} &amp; 0 &amp; 0 \\
        0 &amp; \frac{\partial}{\partial y} &amp; 0 \\
        0 &amp; 0 &amp; \frac{\partial}{\partial z} \\
        \frac{\partial}{\partial y} &amp; \frac{\partial}{\partial x} &amp; 0 \\
        0 &amp; \frac{\partial}{\partial z} &amp; \frac{\partial}{\partial y} \\
        \frac{\partial}{\partial z} &amp; 0 &amp; \frac{\partial}{\partial x}
    \end{bmatrix} \tag{4}
\]</span></p>
<p><span class="math inline">\(\mathbf{N}\)</span> 为单元形函数。 在实际工程计算中，有限元网格往往是不规则的，直接计算形函数并不方便。 因此，引入自然坐标 <span class="math inline">\((\xi, \eta, \zeta)\)</span>，以简化形函数的计算。 8节点六面体单元在总体（笛卡尔）坐标系与局部（自然）坐标系下的示意图如下所示。</p>
<p><img src='/2024/07/21/8%E8%8A%82%E7%82%B9%E5%85%AD%E9%9D%A2%E4%BD%93%E5%8D%95%E5%85%83%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E6%95%B0%E5%80%BC%E7%A7%AF%E5%88%861%EF%BC%9A%E5%AE%8C%E5%85%A8%E7%A7%AF%E5%88%86/hexa8element.jpg' /&gt;</p>
<p>节点按逆时针方向进行编号。</p>
<p>引入自然坐标后，自然坐标系下的形函数为： <span class="math display">\[
N_i = \frac{1}{8}(1+\xi \xi_i)(1+\eta \eta_i)(1+\zeta \zeta_i) \tag{5}
\]</span></p>
<p>将其展开，则为： <span class="math display">\[
\begin{matrix}
N_1 = \frac{1}{8}(1 - \xi)(1 - \eta)(1 - \zeta)  \\
N_2 = \frac{1}{8}(1 + \xi)(1 - \eta)(1 - \zeta)  \\
N_3 = \frac{1}{8}(1 + \xi)(1 + \eta)(1 - \zeta)  \\
N_4 = \frac{1}{8}(1 - \xi)(1 + \eta)(1 - \zeta)  \\
N_5 = \frac{1}{8}(1 - \xi)(1 - \eta)(1 + \zeta)  \\
N_6 = \frac{1}{8}(1 + \xi)(1 - \eta)(1 + \zeta)  \\
N_7 = \frac{1}{8}(1 + \xi)(1 + \eta)(1 + \zeta)  \\
N_8 = \frac{1}{8}(1 - \xi)(1 + \eta)(1 + \zeta)
\end{matrix} \tag{6}
\]</span></p>
<p>上述形函数定义在自然坐标系 <span class="math inline">\((\xi, \eta, \zeta)\)</span> 下，而应变矩阵需要的是形函数对总体坐标系 <span class="math inline">\((x, y, z)\)</span> 求偏导，这就需要用到链式法则： <span class="math display">\[
\begin{matrix}
\frac{\partial N_i}{\partial \xi} = \frac{\partial N_i}{\partial x} \frac{\partial x}{\partial \xi}
                                  + \frac{\partial N_i}{\partial y} \frac{\partial y}{\partial \xi}
                                  + \frac{\partial N_i}{\partial z} \frac{\partial z}{\partial \xi}\\
\frac{\partial N_i}{\partial \eta} = \frac{\partial N_i}{\partial x} \frac{\partial x}{\partial \eta}
                                   + \frac{\partial N_i}{\partial y} \frac{\partial y}{\partial \eta}
                                   + \frac{\partial N_i}{\partial z} \frac{\partial z}{\partial \eta}\\
\frac{\partial N_i}{\partial \zeta} = \frac{\partial N_i}{\partial x} \frac{\partial x}{\partial \zeta}
                                    + \frac{\partial N_i}{\partial y} \frac{\partial y}{\partial \zeta}
                                    + \frac{\partial N_i}{\partial z} \frac{\partial z}{\partial \zeta}  \tag{7}
\end{matrix}
\]</span></p>
<p>式(7)可写为矩阵形式： <span class="math display">\[
\begin{Bmatrix}
    \partial N_i / \partial \xi   \\
    \partial N_i / \partial \eta  \\
    \partial N_i / \partial \zeta
\end{Bmatrix} = \mathbf{J} \begin{Bmatrix}
    \partial N_i / \partial x  \\
    \partial N_i / \partial y  \\
    \partial N_i / \partial z  \\
\end{Bmatrix}  \tag{8}
\]</span> 其中，<span class="math inline">\(\mathbf{J}\)</span> 称为雅可比矩阵，定义为： <span class="math display">\[
\mathbf{J} = \begin{bmatrix}
    \partial x / \partial \xi   &amp; \partial y / \partial \xi   &amp; \partial z / \partial \xi   \\
    \partial x / \partial \eta  &amp; \partial y / \partial \eta  &amp; \partial z / \partial \eta  \\
    \partial x / \partial \zeta &amp; \partial y / \partial \zeta &amp; \partial z / \partial \zeta
\end{bmatrix} \tag{9}
\]</span></p>
<p>所以，公式(8) 可改写为： <span class="math display">\[
\begin{Bmatrix}
    \partial N_i / \partial x  \\
    \partial N_i / \partial y  \\
    \partial N_i / \partial z  \\
\end{Bmatrix} = \mathbf{J}^{-1} \begin{Bmatrix}
    \partial N_i / \partial \xi   \\
    \partial N_i / \partial \eta  \\
    \partial N_i / \partial \zeta
\end{Bmatrix} \tag{10}
\]</span></p>
<p>公式(10) 可用于计算应变矩阵 <span class="math inline">\(\mathbf{B}\)</span>。</p>
<p>计算出应变矩阵 <span class="math inline">\(\mathbf{B}\)</span> 后，公式(1) 可改写为： <span class="math display">\[
\mathbf{k}_e = \int_{V_e} \mathbf{B}^T \mathbf{DB} \mathrm{d}V = \int_{-1}^{+1} \int_{-1}^{+1} \int_{-1}^{+1} \mathbf{B}^T \mathbf{DB} \mathrm{det}[\mathbf{J}] \mathrm{d}\xi \mathrm{d}\eta \mathrm{d}\zeta \tag{11}
\]</span></p>
<p>直接计算公式(11)是非常困难的，因此，一般使用数值方法对其进行计算，最常用的是高斯积分方法： <span class="math display">\[
\mathbf{I} = \int_{-1}^{+1} \int_{-1}^{+1} \int_{-1}^{+1} f(\xi, \eta, \zeta) \mathrm{d}\xi \mathrm{d}\eta \mathrm{d}\zeta =
\sum_{i=1}^n \sum_{i=1}^m \sum_{i=1}^l w_i w_j w_k f(\xi_i, \eta_j, \eta_k) \tag{12}
\]</span></p>
<h3 id="质量矩阵">质量矩阵</h3>
<p>三维实体单元的质量矩阵为： <span class="math display">\[
\mathbf{m}_e = \int_{V_e} \rho \mathbf{N}^T \mathbf{N} \mathrm{d}V \tag{13}
\]</span></p>
<p>可参考式(11)，使用形函数进行计算。</p>
<h3 id="载荷列阵">载荷列阵</h3>
<p>三维实体单元的载荷列阵为： <span class="math display">\[
\mathbf{F}_b = \int_{V_e}\mathbf{N}^T \mathbf{f}_b \mathrm{d}V \tag{14}
\]</span> 和 <span class="math display">\[
\mathbf{F}_s = \int_{S_e}\mathbf{N}^T \mathbf{f}_s \mathrm{d}S \tag{15}
\]</span> 其中， <span class="math inline">\(\mathbf{F}_b\)</span> 和 <span class="math inline">\(\mathbf{F}_s\)</span> 分别为体力和面力的等效节点载荷。</p>
<p>同样的，可以参考公式(11)，使用形函数进行计算。</p>
<h2 id="完全积分">完全积分</h2>
<p>对于8节点六面体单元，如果使用完全积分方法，会产生剪切自锁现象，导致单元刚度增大，结构位移小于理论值。 所以ANSYS和ABAQUS都没有集成完全积分方法（ABAQUS的C3D8单元使用的选择减缩积分方法，我会在下一篇文章中介绍）。</p>
<p>但是，完全积分方法比较基础，从其入门还是很有必要。</p>
<p>一维单元的高斯积分点和权系数如下图所示。</p>
<p><img src='/2024/07/21/8%E8%8A%82%E7%82%B9%E5%85%AD%E9%9D%A2%E4%BD%93%E5%8D%95%E5%85%83%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E6%95%B0%E5%80%BC%E7%A7%AF%E5%88%861%EF%BC%9A%E5%AE%8C%E5%85%A8%E7%A7%AF%E5%88%86/GaussIntegration.jpg' /&gt;</p>
<p>而三维六面体单元的高斯积分点和权系数，可在一维单元高斯积分点和权系数的基础上扩展而来， 即在3个方向上均使用一维的高斯积分点和权系数。</p>
<p>所谓完全积分，指的是在3个方向上，都使用2个积分点进行积分，总共 2x2x2=8个积分点。</p>
<p>以下代码是完全积分方法的核心代码，截取自参考文献[1]：</p>
<p><img src='/2024/07/21/8%E8%8A%82%E7%82%B9%E5%85%AD%E9%9D%A2%E4%BD%93%E5%8D%95%E5%85%83%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E6%95%B0%E5%80%BC%E7%A7%AF%E5%88%861%EF%BC%9A%E5%AE%8C%E5%85%A8%E7%A7%AF%E5%88%86/FullIntegrationCode.jpg' /&gt;</p>
<p>其中，nip为8，der为形函数对自然坐标的偏导数，jac（前、后）分别为雅可比矩阵和雅可比矩阵的逆，deriv为形函数对总体坐标系的偏导数。截图中使用到的其它子例程，可以下载文献[1]的随书代码进行查看。 需要注意的是，文献[1]中节点编号方式与本文所用的编号方式不同，而本文的节点编号方式是主流方式。</p>
<h2 id="验证">验证</h2>
<p>参考文献[1]，自编有限元程序。为验证程序的正确性，将其与商业软件进行对比。</p>
<p>由于ANSYS和ABAQUS未集成完全积分方法，因此，使用Nastran进行验证。</p>
<p>Nastran默认也不会使用完全积分方法，需要修改PSOLID卡片，将IN设置为TWO，将ISOP设置为FULL。 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PSOLID  1       1               TWO             FULL                            </span><br></pre></td></tr></table></figure></p>
<p>验证模型为长 1000mm 的悬臂梁，梁截面为边长 100mm 的正方形，一端固定，另一端承受 1000N 的集中力。 材料为钢，弹性模量 200000MPa， 泊松比 0.3，如下图所示：</p>
<p><img src='/2024/07/21/8%E8%8A%82%E7%82%B9%E5%85%AD%E9%9D%A2%E4%BD%93%E5%8D%95%E5%85%83%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E6%95%B0%E5%80%BC%E7%A7%AF%E5%88%861%EF%BC%9A%E5%AE%8C%E5%85%A8%E7%A7%AF%E5%88%86/FEM_Model.jpg' /&gt;</p>
<p>静力学计算结果如下图所示：</p>
<p><img src='/2024/07/21/8%E8%8A%82%E7%82%B9%E5%85%AD%E9%9D%A2%E4%BD%93%E5%8D%95%E5%85%83%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E6%95%B0%E5%80%BC%E7%A7%AF%E5%88%861%EF%BC%9A%E5%AE%8C%E5%85%A8%E7%A7%AF%E5%88%86/static_result.jpg' /&gt;</p>
<p>可以看出，自编程序的结果（右）在z方向上与Nastran（左）完全一致，x、y方向有细微差别。 这是由于在约束的处理上，自编代码使用了罚函数方法，而Nastran使用了删除行列的方法 （文献[1]也是使用的删除行列的方法，若直接使用文献[1]的代码，其解过将与Nastran完全一致）。</p>
<p>去掉集中力，对模型进行模态分析，分别使用集中质量矩阵和一致质量矩阵，计算结果如下：</p>
<p><img src='/2024/07/21/8%E8%8A%82%E7%82%B9%E5%85%AD%E9%9D%A2%E4%BD%93%E5%8D%95%E5%85%83%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E6%95%B0%E5%80%BC%E7%A7%AF%E5%88%861%EF%BC%9A%E5%AE%8C%E5%85%A8%E7%A7%AF%E5%88%86/modal_result.jpg' /&gt;</p>
<p>可以看出，无论是集中质量矩阵（上）还是一致质量矩阵（下），自编程序（右）与Nastran（左）计算出的模态频率均一致。</p>
<h2 id="参考文献">参考文献</h2>
<p>[1] Smith I M, Griffiths D V, Margetts L. Programming the finite element method[M]. John Wiley &amp; Sons, 2013.</p>
<p>[2] Liu G R, Quek S S. The finite element method: a practical course[M]. Butterworth-Heinemann, 2013.</p>
<p>[3] 王勖成. 有限单元法[M]. 清华大学出版社有限公司, 2003.</p>
<p>[4] ANSYS Mechanical APDL Theory Reference</p>
]]></content>
      <categories>
        <category>2.单元构造</category>
        <category>1.8节点六面体单元</category>
      </categories>
      <tags>
        <tag>8节点六面体单元</tag>
        <tag>完全积分</tag>
        <tag>等参元</tag>
      </tags>
  </entry>
  <entry>
    <title>OCC+VTK显示CAD模型</title>
    <url>/2023/10/15/OCC-VTK%E6%98%BE%E7%A4%BACAD%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>早些时候，这篇文章已经被我发布在了知乎上：“<a href="https://zhuanlan.zhihu.com/p/455592800">VTK+OCC显示CAD模型</a>”，今天将文章重新编辑，发布在Github上，主要是为了测试Hexo的用法。</p>
<h2 id="测试环境">测试环境</h2>
<ul>
<li>系统：Win11</li>
<li>IDE：Visual Studio Community 2019</li>
<li>VTK：VTK 9.2</li>
<li>OCC：OCCT 7.6</li>
</ul>
<h2 id="正文">正文</h2>
<p>VTK是一款十分优秀的可视化套件，开源且功能强大，基本上可以满足有限元领域的全部可视化需求。遗憾的是，VTK不支持CAD模型（如igs、stp格式的模型）的显示。</p>
<p>在网上搜索后可以发现，在不花钱的情况下，想要显示和处理CAD模型，基本上都得使用OpenCasCade，即OCC。OCC有自己的可视化系统，也可以集成在Qt中。但对我而已，OCC自己的可视化系统还是太复杂了。</p>
<p>好在OCC在6.8版本开发了VIS（VTK Integration Services）功能，之后的版本就可以使用VTK进行模型的可视化了。</p>
<p>为了使用VIS功能，编译OCC的时候需要选择USE_VTK的选项，编译完成后，将生成TKIVtk、TKIVtkDraw的动态库和静态库。如果编译路径下有这两个库，说明VIS的功能是编译成功了。</p>
<p>编写一个最小案例看看显示效果。</p>
<p>CMakeLists.txt文件：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.15</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(occvtk LANGUAGES CXX)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(VTK REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(OpenCASCADE REQUIRED)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;OpenCASCADE_INCLUDE_DIR&#125;</span>)</span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;OpenCASCADE_LIBRARY_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="keyword">test</span> <span class="keyword">test</span>.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="keyword">test</span></span><br><span class="line">    <span class="variable">$&#123;VTK_LIBRARIES&#125;</span></span><br><span class="line">    <span class="variable">$&#123;OpenCASCADE_LIBRARIES&#125;</span></span><br><span class="line">)</span><br><span class="line">vtk_module_autoinit(</span><br><span class="line">    TARGETS <span class="keyword">test</span></span><br><span class="line">    MODULES <span class="variable">$&#123;VTK_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>在此CMakeLists文件中，没有写死VTK和OCC的路径，而是使用find_package命令查找。如果没有找到，可以在命令行执行cmake命令时使用-D参数将相关路径传入:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake .. -DVTK_DIR:PATH=/home/me/vtk_build -DVTK_DIR -DOpenCASCADE_DIR:PATH=/home/me/occ_build</span><br></pre></td></tr></table></figure>
<p>test.cpp文件:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;STEPControl_Reader.hxx&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Standard_Integer.hxx&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TopoDS_Shape.hxx&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;IFSelect_ReturnStatus.hxx&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;IFSelect_PrintCount.hxx&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;IVtkTools_ShapeDataSource.hxx&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;IVtkOCC_ShapeMesher.hxx&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;IVtkTools_DisplayModeFilter.hxx&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkType.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkAutoInit.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkRenderWindow.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkActor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkRenderer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkRenderWindowInteractor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkPolyDataMapper.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkInteractorStyleTrackballCamera.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">VTK_MODULE_INIT</span>(vtkRenderingOpenGL2)</span><br><span class="line"><span class="built_in">VTK_MODULE_INIT</span>(vtkInteractionStyle)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STEPControl_Reader reader;</span><br><span class="line">    IFSelect_ReturnStatus stat = reader.<span class="built_in">ReadFile</span>(<span class="string">&quot;assembly_solid.stp&quot;</span>);</span><br><span class="line">    IFSelect_PrintCount mode = IFSelect_CountByItem;</span><br><span class="line">    Standard_Integer NbRoots = reader.<span class="built_in">NbRootsForTransfer</span>();</span><br><span class="line">    Standard_Integer num = reader.<span class="built_in">TransferRoots</span>();</span><br><span class="line">    Standard_Integer NbTrans = reader.<span class="built_in">TransferRoots</span>();</span><br><span class="line">    TopoDS_Shape result = reader.<span class="built_in">OneShape</span>();</span><br><span class="line">    <span class="comment">// TopoDS_Shape shape = reader.Shape();</span></span><br><span class="line"></span><br><span class="line">    vtkNew&lt;IVtkTools_ShapeDataSource&gt; occSource;</span><br><span class="line">    <span class="comment">//occSource-&gt;SetShape(new IVtkOCC_Shape(shape));</span></span><br><span class="line">    occSource-&gt;<span class="built_in">SetShape</span>(<span class="keyword">new</span> <span class="built_in">IVtkOCC_Shape</span>(result));</span><br><span class="line"></span><br><span class="line">    vtkNew&lt;IVtkTools_DisplayModeFilter&gt; filter;</span><br><span class="line">    filter-&gt;<span class="built_in">AddInputConnection</span>(occSource-&gt;<span class="built_in">GetOutputPort</span>());</span><br><span class="line">    filter-&gt;<span class="built_in">SetDisplayMode</span>(DM_Shading);</span><br><span class="line"></span><br><span class="line">    vtkNew&lt;vtkPolyDataMapper&gt; mapper;</span><br><span class="line">    mapper-&gt;<span class="built_in">SetInputConnection</span>(filter-&gt;<span class="built_in">GetOutputPort</span>());</span><br><span class="line"></span><br><span class="line">    vtkNew&lt;vtkActor&gt; actor;</span><br><span class="line">    actor-&gt;<span class="built_in">SetMapper</span>(mapper);</span><br><span class="line"></span><br><span class="line">    vtkNew&lt;vtkRenderer&gt; ren;</span><br><span class="line">    ren-&gt;<span class="built_in">AddActor</span>(actor);</span><br><span class="line"></span><br><span class="line">    vtkNew&lt;vtkRenderWindow&gt; renWin;</span><br><span class="line">    renWin-&gt;<span class="built_in">AddRenderer</span>(ren);</span><br><span class="line">    renWin-&gt;<span class="built_in">SetSize</span>(<span class="number">960</span>, <span class="number">800</span>);</span><br><span class="line"></span><br><span class="line">    vtkNew&lt;vtkInteractorStyleTrackballCamera&gt; istyle;</span><br><span class="line">    vtkNew&lt;vtkRenderWindowInteractor&gt; iren;</span><br><span class="line"></span><br><span class="line">    iren-&gt;<span class="built_in">SetRenderWindow</span>(renWin);</span><br><span class="line">    iren-&gt;<span class="built_in">SetInteractorStyle</span>(istyle);</span><br><span class="line"></span><br><span class="line">    renWin-&gt;<span class="built_in">Render</span>();</span><br><span class="line">    iren-&gt;<span class="built_in">Start</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此测试代码将模型文件“assembly_solid.stp”写死在了源代码中，编译完成后，需要确保可执行文件可以找到模型文件。</p>
<p>显示效果如下：</p>
<p><img src="/2023/10/15/OCC-VTK%E6%98%BE%E7%A4%BACAD%E6%A8%A1%E5%9E%8B/assembly.jpg" /&gt;</p>
]]></content>
      <categories>
        <category>1.前后处理</category>
      </categories>
      <tags>
        <tag>OCC</tag>
        <tag>VTK</tag>
        <tag>可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>各种命令的笔记</title>
    <url>/2023/11/19/%E5%90%84%E7%A7%8D%E5%91%BD%E4%BB%A4%E7%9A%84%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="linux">Linux</h2>
<h3 id="解压缩">解压缩</h3>
<p>zip格式： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip filename.zip</span><br></pre></td></tr></table></figure></p>
<p>tar格式： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xvf filename.tar.xxx  <span class="comment"># 其中，xxx是gz、bz2、xz、z等后缀（1.15版之后可自动识别压缩格式）</span></span><br></pre></td></tr></table></figure></p>
<h3 id="磁盘">磁盘</h3>
<p>查看磁盘空间： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -hl</span><br></pre></td></tr></table></figure></p>
<h2 id="linux子系统wsl">Linux子系统（WSL）</h2>
<p>移除子系统中的Windows环境变量（仅当次起效）: <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PATH=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PATH</span>&quot;</span> | sed -e <span class="string">&#x27;s/:\/mnt.*//g&#x27;</span>) <span class="comment"># strip out problematic Windows %PATH% imported var</span></span><br></pre></td></tr></table></figure></p>
<h2 id="hexo">Hexo</h2>
<p>新建文章 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></p>
<p>清理缓存和生成的静态文件；生成静态文件；启动服务，端口为5000</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean; hexo g; hexo s -p 5000</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>4.其它</category>
      </categories>
      <tags>
        <tag>命令行</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>特征问题的解法——向量迭代法(1)</title>
    <url>/2024/04/06/%E7%89%B9%E5%BE%81%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E6%B3%95%E2%80%94%E2%80%94%E5%90%91%E9%87%8F%E8%BF%AD%E4%BB%A3%E6%B3%951/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>在工程中，我们经常需要对模型进行模态分析，以确定模型的模态频率和振型。</p>
<p>模态分析本质上是求解特征值问题 <span class="math display">\[
{\mathbf K \phi} = \lambda {\mathbf M \phi} \tag{1}
\]</span> 特别是求解最小特征值 <span class="math inline">\(\lambda_1, \dots, \lambda_p\)</span> 及其特征向量 <span class="math inline">\(\phi_1, \dots, \phi_p\)</span> 。</p>
<p>常用的特征值求解算法可分为四类，对应于求解算法利用的基本性质。</p>
<p>第一类是向量迭代法(Vector Iteration Method)，又称为幂法(Power Iteration Method)，利用的基本性质是 <span class="math display">\[
{\mathbf K \phi_i} = \lambda_i{\mathbf M \phi_i} \tag{2}
\]</span></p>
<p>第二类为变换法，利用的基本性质是 <span class="math display">\[
{\mathbf{\Phi^T K \Phi}} = {\mathbf{\Lambda}}  \tag{3}
\]</span> <span class="math display">\[
{\mathbf{\Phi^T M \Phi}} = {\mathbf{I}}  \tag{4}
\]</span> 其中， <span class="math inline">\({\rm \Phi} = \left[ {\rm \phi_i, \dots, \phi_n} \right]\)</span> 和 <span class="math inline">\({\rm \Lambda} = {\rm diag(\lambda_i)}, i=1,\dots,n\)</span> 。</p>
<p>第三类为多项式迭代法，利用的基本性质是 <span class="math display">\[
p(\lambda_i) = 0 \tag{5}
\]</span> 其中， <span class="math display">\[
p(\lambda) = {\rm{det}(\mathbf{K} - \lambda \mathbf{M})} \tag{6}
\]</span></p>
<p>第四类求解算法利用特征多项式的 Sturm 序列性质 <span class="math display">\[
p(\lambda) = {\rm{det}(\mathbf{K} - \lambda \mathbf{M})} \tag{7}
\]</span> <span class="math display">\[
p^{(r)}(\lambda^{(r)}) = {\rm{det}(\mathbf{K}^{(r)} - \lambda^{(r)}\mathbf{M}^{(r)})}; \quad r=1,\dots,n-1  \tag{8}
\]</span> 其中， <span class="math inline">\(p^{(r)}(\lambda^{(r)})\)</span> 是对应于<span class="math inline">\({\rm K \phi = \lambda M \phi}\)</span> 的第 <span class="math inline">\(r\)</span> 个相伴约束问题的特征多项式。</p>
<p>在四类求解方法中，每一类都提出了许多算法。</p>
<p>在学习具体算法前，需要认识到，求解算法应具有迭代性质， 因为求解特征问题 <span class="math inline">\({\rm K \phi = \lambda M \phi}\)</span> 就等价于计算多项式 <span class="math inline">\(p(\lambda)\)</span> 的根，它的阶等于 <span class="math inline">\({\rm K}\)</span> 和 <span class="math inline">\({\rm M}\)</span> 的阶。</p>
<p>接下来开始介绍第一类方法：向量迭代法。而在介绍向量迭代法之前，先尝试理解其基本思想。</p>
<h2 id="向量迭代法">向量迭代法</h2>
<h3 id="基本思想">基本思想</h3>
<p>假设向量 <span class="math inline">\({\rm A}\)</span> 有 <span class="math inline">\(n\)</span> 个线性无关的特征向量 <span class="math inline">\(\mathit{x_1, \dots, x_n}\)</span> ，且相应的特征值满足 <span class="math display">\[
|\lambda_1| &gt; |\lambda_2| \geq \dots \geq |\lambda_n|
\]</span></p>
<p>给定一个任意向量 <span class="math inline">\(\mathit{v}_0\)</span> ，假设 <span class="math display">\[
\mathit{v}_0 = \alpha_1 \mathit{x}_1 + \dots + \alpha_n \mathit{x}_n
\]</span></p>
<p>将 <span class="math inline">\({\rm A}\)</span> 作用于该向量，有 <span class="math display">\[
\mathbf{A} \mathit{v}_0 = \alpha_1 \lambda_1 \mathit{x}_1 + \alpha_2 \lambda_2 \mathit{x}_2 + \dots + \alpha_n \lambda_n \mathit{x}_n \\
\mathbf{A}^2 \mathit{v}_0 = \alpha_1 \lambda_1^2 \mathit{x}_1 + \alpha_2 \lambda_2^2 \mathit{x}_2 + \dots + \alpha_n \lambda_n^2 \mathit{x}_n
\]</span></p>
<p>且一般地， <span class="math display">\[
\mathbf{A}^k \mathit{v}_0 = \alpha_1 \lambda_1^k \mathit{x}_1 + \alpha_2 \lambda_2^k \mathit{x}_2 + \dots + \alpha_n \lambda_n^k \mathit{x}_n  \tag{9}
\]</span></p>
<p>若定义 <span class="math display">\[
\mathit{v}_k = \mathbf{A}^k \mathit{v}_0, \quad k=1, 2, \dots
\]</span></p>
<p>则 <span class="math display">\[
\frac{1}{\lambda_1^k} \mathit{v}_k = \alpha_1 \mathit{x}_1 + \alpha_2 (\frac{\lambda_2}{\lambda_1})^k \mathit{x}_2 + \dots + \alpha_2 (\frac{\lambda_n}{\lambda_1})^k \mathit{x}_n \tag{10}
\]</span></p>
<p>由于 <span class="math display">\[
\left| \frac{\lambda_i}{\lambda_1} \right| &lt; 1, \quad, i=2,3,\dots,n
\]</span></p>
<p>由此得到： <span class="math display">\[
\frac{1}{\lambda_1^k} \mathit{v}_k \rightarrow \alpha_1 \mathit{x}_1, \quad k \rightarrow \infty
\]</span></p>
<p>因此，若 <span class="math inline">\(\alpha_1 \neq 0\)</span> ，则序列 <span class="math inline">\(\{ (1/\lambda_1^k) \mathit{v}_k \}\)</span> 收敛到 <span class="math inline">\(\mathbf{A}\)</span> 的特征向量 <span class="math inline">\(\alpha_1 \mathit{x}_1\)</span>。</p>
<p>当然，由于 <span class="math inline">\(\lambda_1\)</span> 是未知的，所以无法计算 <span class="math inline">\(\{ (1/\lambda_1^k) \mathit{v}_k \}\)</span> 。 但好在不需要将序列 <span class="math inline">\(\{ \mathit{v}_k \}\)</span> 用 <span class="math inline">\(1/\lambda_1^k\)</span> 进行缩放。</p>
<p>这就是正迭代法的思想，能计算出最大的特征值。</p>
<p>而模态分析需要计算的是最小特征值，需要使用的是逆迭代法，即需要将 <span class="math inline">\(\mathbf{A}^{-1}\)</span> 作用在向量上。</p>
<h2 id="逆迭代和正迭代">逆迭代和正迭代</h2>
<p>向量迭代法所考虑的基本关系式是 <span class="math display">\[
{\mathbf K \phi} = \lambda {\mathbf M \phi} \tag{1}
\]</span></p>
<p>选择 <span class="math inline">\(\phi\)</span> 的一个向量 <span class="math inline">\(\mathbf{x}_1\)</span> ，对 <span class="math inline">\(\lambda\)</span> 设定一个值，令 <span class="math inline">\(\lambda = 1\)</span> 。于是，可以计算公式 (1) 的右手边，即可以计算 <span class="math display">\[
\mathbf{R}_1 = (1)\mathbf{M x_1} \tag{11}
\]</span> 由于 <span class="math inline">\(\mathbf{x}_1\)</span> 是任意向量，一般不满足 <span class="math inline">\(\mathbf{K x_1 = R_1}\)</span> 。考虑静平衡方程 $$</p>
<p>;   $$ 其中， <span class="math inline">\(\mathbf{x_2}\)</span> 是位移解，对应于作用力 <span class="math inline">\(\mathbf{R}\)</span> 。 由于我们是使用迭代法求解特征向量，所以我们可以直观地认为，<span class="math inline">\(\mathbf{x_2}\)</span> 是比 <span class="math inline">\(\mathbf{x_1}\)</span> 更好的近似特征向量。 通过反复进行此迭代，可以得到越来越好的近似特征向量。</p>
<p>上述过程即为逆迭代的基础。</p>
<p>而在正迭代中，迭代过程是反向的，即在第一步中，计算 <span class="math inline">\(\mathbf{R_1 = K x_1}\)</span> ， 然后通过求解 <span class="math inline">\(\mathbf{M x_2 = R_1}\)</span> ，得到改进的近似特征向量 <span class="math inline">\(\mathbf{x_2}\)</span> 。</p>
<h3 id="基本算法描述">基本算法描述</h3>
<p>首先考虑逆迭代法中所用的基本方程。</p>
<p>在求解中，假设初始迭代向量为 <span class="math inline">\(\mathbf{x}_1\)</span>，在每个迭代步骤 <span class="math inline">\(k = 1, 2,\dots\)</span> 时，计算 <span class="math display">\[
\begin{align}
    \mathbf{K \bar{x}}_{k+1} &amp;= \mathbf{M x}_k \tag{13}  \\
    \mathbf{x}_{k+1} &amp;= \frac{\mathbf{\bar{x}}_{k+1}}{(\mathbf{\bar{x}}_{k+1}^T \mathbf{M} \mathbf{\bar{x}}_{k+1})^{1/2}} \tag{14}
\end{align}
\]</span> 其中，只要 <span class="math inline">\(\mathbf{x}_1\)</span> 和 <span class="math inline">\(\phi_i\)</span> 不与 <span class="math inline">\(\mathbf{M}\)</span> 正交，即 <span class="math inline">\(\mathbf{x_1^T M \phi_1} \neq 0\)</span> ，就有 <span class="math display">\[
当 k \rightarrow \infty, \quad \mathbf{x}_{k+1} \rightarrow \phi_1
\]</span></p>
<p>迭代法的基本步骤是求解方程 (13)，每求解一次，我们就能够得到比前一次迭代向量 <span class="math inline">\(\mathbf{x}_{k}\)</span> 更接近特征向量的新向量 <span class="math inline">\(\mathbf{x}_{k+1}\)</span> 。 式 (14) 的计算对新的迭代向量进行缩放，使其与 <span class="math inline">\(\mathbf{M}\)</span> 的加权长度为 <span class="math inline">\(1\)</span> ，即令 <span class="math inline">\(\mathbf{x}_{k+1}\)</span> 满足质量正交条件 <span class="math display">\[
\mathbf{x_{k+1}^{T} M x_{k+1}} = 1 \tag{15}
\]</span> 当然，也可以将向量 <span class="math inline">\(\mathbf{x}_{k+1}\)</span> 缩放到其他长度。</p>
<h3 id="更有效的算法">更有效的算法</h3>
<p>式 (13)、(14) 是基本的逆迭代算法，但在实际实现中，以下方法更加有效。</p>
<p>假设 <span class="math inline">\(\mathbf{y}_1 = \mathbf{M x_1}\)</span> ，计算 <span class="math inline">\(k = 1, 2, \dots\)</span> ， <span class="math display">\[
\begin{align}
    \mathbf{K \bar{x}}_{k+1} &amp;= \mathbf{y}_k  \tag{16}  \\
    \mathbf{\bar{y}}_{k+1} &amp;= \mathbf{M \bar{x}}_{k+1} \tag{17} \\
    \rho(\mathbf{\bar{x}}_{k+1}) &amp;= \frac{\mathbf{\bar{x}}_{k+1}^T \mathbf{y}_k}{\mathbf{\bar{x}}_{k+1}^T \mathbf{\bar{y}}_{k+1}} \tag{18} \\
    \mathbf{y}_{k+1} &amp;= \frac{\mathbf{\bar{y}}_{k+1}}{(\mathbf{\bar{x}_{k+1}^T \mathbf{\bar{y}}_{k+1}})^{1/2}} \tag{19}
\end{align}
\]</span> 其中，只要 <span class="math inline">\(\mathbf{y}_1^T \phi_1 \neq 0\)</span> ，有 <span class="math display">\[
当 k \rightarrow \infty 时，\mathbf{y}_{k+1} \rightarrow \mathbf{M \phi_1} 和 \phi(\mathbf{\bar{x}}_{k+1}) \rightarrow \lambda_1
\]</span> 本算法对 <span class="math inline">\(\mathbf{y}_k\)</span> 进行迭代而非对 <span class="math inline">\(\mathbf{x}_k\)</span> 进行迭代。 式 (18) 中，我们得到了特征值 <span class="math inline">\(\lambda_1\)</span> 的近似值，其以瑞利商 <span class="math inline">\(\rho(\mathbf{\bar{x}}_{k+1})\)</span> 的形式给出。 <span class="math inline">\(\lambda_1\)</span> 的近似值可以用于评估迭代的收敛情况。 若当前的 <span class="math inline">\(\lambda_1\)</span> 的近似值用 <span class="math inline">\(\lambda_1^{(k+1)}\)</span> 表示，即 <span class="math inline">\(\lambda_1^{(k+1)} = \rho(\mathbf{\bar{x}}_{k+1})\)</span>， 那么我们通过式 (20) 判断迭代是否收敛： <span class="math display">\[
\frac{\left| \lambda_1^{(k+1)} - \lambda_1^{(k)} \right|}{\lambda_1^{(k+1)}} \leq tol \tag{20}
\]</span> 当特征值 <span class="math inline">\(\lambda_1\)</span> 需要 <span class="math inline">\(2s\)</span> 的精度时，<span class="math inline">\(tol\)</span> 应该是 <span class="math inline">\(10^{-2s}\)</span> 或更小。</p>
<h2 id="代码实现和测试">代码实现和测试</h2>
<h3 id="实现">实现</h3>
<p>使用 Python 语言对基本算法和更高效的算法进行实现，代码如下。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_iteration_method1</span>(<span class="params">k: np.ndarray, m: np.ndarray</span>):</span><br><span class="line">    n = k.shape[<span class="number">0</span>]</span><br><span class="line">    x = np.ones((n, <span class="number">1</span>))</span><br><span class="line">    x_pre = x</span><br><span class="line">    i_iter = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        i_iter += <span class="number">1</span></span><br><span class="line">        x = np.linalg.solve(k, m @ x)</span><br><span class="line">        norm = x.transpose() @ m @ x</span><br><span class="line">        x /= np.sqrt(norm)</span><br><span class="line">        <span class="keyword">if</span> np.<span class="built_in">all</span>(<span class="built_in">abs</span>(x - x_pre) &lt; <span class="number">1e-6</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        x_pre = x</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;方法1：迭代<span class="subst">&#123;i_iter&#125;</span>次&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;特征值：\n<span class="subst">&#123;<span class="number">1</span>/np.sqrt(norm)&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;特征向量：\n<span class="subst">&#123;x&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_iteration_method2</span>(<span class="params">k: np.ndarray, m: np.ndarray</span>):</span><br><span class="line">    n = k.shape[<span class="number">0</span>]</span><br><span class="line">    x = np.ones((n, <span class="number">1</span>))</span><br><span class="line">    y = m @ x</span><br><span class="line">    rho_pre = <span class="number">0.0</span></span><br><span class="line">    n_iter = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n_iter += <span class="number">1</span></span><br><span class="line">        x = np.linalg.solve(k, y)</span><br><span class="line">        y_bar = m @ x</span><br><span class="line">        rho = x.transpose() @ y / (x.transpose() @ y_bar)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(rho - rho_pre) / rho &lt; <span class="number">1e-6</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        y = y_bar / np.sqrt(x.transpose() @ y_bar)</span><br><span class="line">        rho_pre = rho</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;方法2：迭代<span class="subst">&#123;n_iter&#125;</span>次&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;特征值：\n<span class="subst">&#123;rho&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;特征向量：\n<span class="subst">&#123;x / np.sqrt(x.transpose() @ y_bar)&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="测试">测试</h3>
<p>使用文献 [1] 中的例子进行测试。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    k = np.array([</span><br><span class="line">        [<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [-<span class="number">1</span>, <span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, -<span class="number">1</span>, <span class="number">2</span>, -<span class="number">1</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">    ])</span><br><span class="line">    m = np.array([</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">    ])</span><br><span class="line">    inverse_iteration_method1(k, m)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    k = np.array([</span><br><span class="line">        [<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [-<span class="number">1</span>, <span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, -<span class="number">1</span>, <span class="number">2</span>, -<span class="number">1</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">    ])</span><br><span class="line">    m = np.array([</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">    ])</span><br><span class="line">    inverse_iteration_method2(k, m)</span><br></pre></td></tr></table></figure>
<p>程序输出如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方法1：迭代8次</span><br><span class="line">特征值：</span><br><span class="line">[[0.14644661]]</span><br><span class="line">特征向量：</span><br><span class="line">[[0.25000003]</span><br><span class="line"> [0.50000006]</span><br><span class="line"> [0.60355338]</span><br><span class="line"> [0.70710669]]</span><br><span class="line">方法2：迭代5次</span><br><span class="line">特征值：</span><br><span class="line">[[0.14644661]]</span><br><span class="line">特征向量：</span><br><span class="line">[[0.25000638]</span><br><span class="line"> [0.50001275]</span><br><span class="line"> [0.60355075]</span><br><span class="line"> [0.70708874]]</span><br></pre></td></tr></table></figure>
<p>最小特征值和特征向量的精确解为 <span class="math inline">\(\lambda_1 = \frac{1}{2} - \frac{\sqrt{2}}{4}\)</span> 和 <span class="math inline">\(\phi_1 = [\frac{1}{4} \quad \frac{1}{2} \quad \frac{1+\sqrt{2}}{4} \quad \frac{\sqrt{2}}{2}]^T\)</span>，可以看出，两种逆迭代算法正确算出了最小特征值和特征向量，而后一种算法所需的迭代次数更少。</p>
<p>计算出最小特征值后，剩余特征值的计算方法将在下一篇文章中介绍。</p>
<h2 id="参考文献">参考文献</h2>
<p>[1]. Bathe K J. Finite element procedures[M]. Klaus-Jurgen Bathe, 2006.</p>
<p>[2]. 史蒂文・J.利昂著STEVENJ.LEON.线性代数[M].机械工业出版社,2015.</p>
]]></content>
      <categories>
        <category>3.数值计算</category>
        <category>3.特征问题</category>
      </categories>
      <tags>
        <tag>特征值计算</tag>
        <tag>模态计算</tag>
        <tag>幂法</tag>
        <tag>逆幂法</tag>
        <tag>向量迭代法</tag>
        <tag>逆迭代法</tag>
      </tags>
  </entry>
  <entry>
    <title>特征问题的解法——向量迭代法(2)</title>
    <url>/2024/04/14/%E7%89%B9%E5%BE%81%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E6%B3%95%E2%80%94%E2%80%94%E5%90%91%E9%87%8F%E8%BF%AD%E4%BB%A3%E6%B3%952/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p><a href="https://xianchao-xu.github.io/2024/04/06/%E7%89%B9%E5%BE%81%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E6%B3%95%E2%80%94%E2%80%94%E5%90%91%E9%87%8F%E8%BF%AD%E4%BB%A3%E6%B3%951/">上一篇文章中</a>介绍了计算特征值的逆迭代算法，我们知道基本逆迭代算法收敛于 <span class="math inline">\(\lambda_1\)</span> 和 <span class="math inline">\(\Phi_1\)</span>，基本正迭代算法收敛于 <span class="math inline">\(\lambda_n\)</span> 和 <span class="math inline">\(\Phi_n\)</span>。现在假定我们已经计算出了其中一个特征值对，如 <span class="math inline">\((\lambda_k, \Phi_k)\)</span>，该怎么求解出其它的特征值对呢？</p>
<p>为了确保迭代过程不再收敛于 <span class="math inline">\((\lambda_k, \Phi_k)\)</span>，需要收缩 (Deflation)矩阵或迭代向量。</p>
<h2 id="收缩">收缩</h2>
<h3 id="矩阵收缩">矩阵收缩</h3>
<p>矩阵收缩的基本思想是，求一个正交矩阵 <span class="math inline">\(\mathbf{H}\)</span>，使得 <span class="math inline">\(\mathbf{HKH^{-1}}\)</span> 为一个形如 <span class="math display">\[
\left[ 
    \begin{array}{c|cc}
        \lambda_1 &amp; 0 &amp; \cdots &amp; 0 \\
        \hline
        0 &amp; \\
        \vdots &amp; &amp; \mathbf{K_1}\\
        0
    \end{array} \tag{1}
\right]
\]</span> 的矩阵。由于 <span class="math inline">\(\mathbf{K}\)</span> 和 <span class="math inline">\(\mathbf{HKH^{-1}}\)</span> 是相似的，故它们有相同的特征多项式。因此，若 <span class="math inline">\(\mathbf{HKH^{-1}}\)</span> 形如 (1)，则 <span class="math display">\[
\rm{det} (\mathbf{K - \lambda I}) = \rm{det} (\mathbf{HKH^{-1} -\lambda I}) = \mathbf{(\lambda_1 - \lambda)} \rm{det} (\mathbf{K_1 - \lambda I})
\]</span> 由此可得，<span class="math inline">\(\mathbf{K}\)</span> 的其余 <span class="math inline">\(n-1\)</span> 个特征值是 <span class="math inline">\(\mathbf{K_1}\)</span> 的特征值。</p>
<p>而一旦使用 <span class="math inline">\(\mathbf{K_1}\)</span> 算出了第二个所求特征对后，就可以对 <span class="math inline">\(\mathbf{K_1}\)</span> 重复该收缩过程，直到算出所有需要求解的特征值和特征向量。</p>
<p>应指出，矩阵 <span class="math inline">\(\mathbf{H}\)</span> 不是唯一的，因此可以使用各种方法构建一个适当的变换矩阵。 另外，由于刚度矩阵 <span class="math inline">\(\mathbf{K}\)</span> 是带状的，所以，该变换不应破坏其带状结构。</p>
<h3 id="向量收缩与gram-schmidt方法">向量收缩与Gram-Schmidt方法</h3>
<p>为了得到其它特征对，我们也可以选择不收缩矩阵，而是收缩迭代向量。</p>
<p>向量收缩的基本思想是，逆迭代或正迭代过程中，为了使迭代向量收敛于所求的特征向量，该迭代向量应不与特征向量正交。 反之，如果迭代向量正交于已计算出的特征向量，那么我们就消除了迭代向量收敛于这些特征向量的可能性， 即，迭代向量将收敛于其它特征向量。</p>
<p>Gram-Schmidt方法是一个被广泛应用的向量正交化方法。该方法可用于求解广义特征值问题 <span class="math inline">\(\mathbf{K \Phi = \lambda M \Phi}\)</span>。</p>
<p>假设我们已经利用逆迭代算法求解出特征向量 <span class="math inline">\(\Phi_1,\Phi_2,\cdots,\Phi_m\)</span>，我们需要 <span class="math inline">\(\mathbf{x_1}\)</span> 与这些特征向量 <span class="math inline">\(\mathbf{M}\)</span> 正交化。</p>
<p>在Gram-Schmidt正交化中，特征向量 <span class="math inline">\(\Phi_1,\Phi_2,\cdots,\Phi_m\)</span> 的 <span class="math inline">\(\mathbf{M}\)</span> 正交向量 <span class="math inline">\(\mathbf{\widetilde{x}_1}\)</span> 的计算方法为： <span class="math display">\[
\begin{align}
    \mathbf{\widetilde{x}_1} &amp;= \mathbf{x}_1 - \sum_{i-1}^{m}{\alpha_i \Phi_i} \tag{2}  \\
    \alpha_i &amp;= \mathbf{\Phi_i^T M x_1}; \quad i=1,\cdots,m \tag{3} \\
\end{align}
\]</span></p>
<p>在逆迭代算法中，我们现在就可以使用 <span class="math inline">\(\mathbf{\widetilde{x}_1}\)</span> 作为初始迭代向量。然后，只要 <span class="math inline">\(\mathbf{x_1^T M \Phi_{m+1}} \neq 0\)</span>，迭代向量就将收敛于 <span class="math inline">\(\Phi_{m+1}\)</span> 和 <span class="math inline">\({\lambda_{m+1}}\)</span>。</p>
<h2 id="代码实现和测试">代码实现和测试</h2>
<p>在<a href="https://xianchao-xu.github.io/2024/04/06/%E7%89%B9%E5%BE%81%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E6%B3%95%E2%80%94%E2%80%94%E5%90%91%E9%87%8F%E8%BF%AD%E4%BB%A3%E6%B3%951/">上一篇文章中</a>Python代码的基础上进行修改，实现向量收缩的代码。</p>
<h3 id="代码实现和测试-1">代码实现和测试</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scipy <span class="keyword">as</span> sp</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_iteration_method1</span>(<span class="params">k: np.matrix, m: np.matrix</span>):</span><br><span class="line">    n = k.shape[<span class="number">0</span>]</span><br><span class="line">    eig_val = np.zeros(n)</span><br><span class="line">    eig_vec = np.matrix(np.zeros((n, n)))</span><br><span class="line"></span><br><span class="line">    eps = <span class="number">1e-6</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        x = np.matrix(np.ones(n).reshape(n, <span class="number">1</span>))</span><br><span class="line">        x_pre = x</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">                alpha = eig_vec[:, j].transpose() * m * x</span><br><span class="line">                x -= alpha[<span class="number">0</span>, <span class="number">0</span>] * eig_vec[:, j]</span><br><span class="line">            x = np.linalg.solve(k, m * x)</span><br><span class="line">            norm = x.transpose() * m * x</span><br><span class="line">            x /= np.sqrt(norm)</span><br><span class="line">            <span class="keyword">if</span> np.<span class="built_in">all</span>(<span class="built_in">abs</span>(x - x_pre) &lt; eps):</span><br><span class="line">                eig_val[i] = <span class="number">1</span>/np.sqrt(norm[<span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">                eig_vec[:, i] = x</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            x_pre = x</span><br><span class="line">    <span class="keyword">return</span> eig_val, eig_vec</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_iteration_method2</span>(<span class="params">k: np.matrix, m: np.matrix</span>):</span><br><span class="line">    n = k.shape[<span class="number">0</span>]</span><br><span class="line">    eig_val = np.zeros(n)</span><br><span class="line">    eig_vec = np.matrix(np.zeros((n, n)))</span><br><span class="line"></span><br><span class="line">    eps = <span class="number">1e-6</span></span><br><span class="line">    rho_pre = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        x = np.matrix(np.ones(n).reshape(n, <span class="number">1</span>))</span><br><span class="line">        y = m * x</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            x = np.linalg.solve(k, y)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">                alpha = eig_vec[:, j].transpose() * m * x</span><br><span class="line">                x -= alpha[<span class="number">0</span>, <span class="number">0</span>] * eig_vec[:, j]</span><br><span class="line">            y_bar = m * x</span><br><span class="line">            rho = x.transpose() * y / (x.transpose() * y_bar)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(rho - rho_pre) / rho &lt; eps:</span><br><span class="line">                eig_val[i] = rho[<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">                eig_vec[:, i] = x / np.sqrt(x.transpose() * y_bar)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            y = y_bar / np.sqrt(x.transpose() * y_bar)</span><br><span class="line">            rho_pre = rho</span><br><span class="line">    <span class="keyword">return</span> eig_val, eig_vec</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    k = np.matrix(np.array([</span><br><span class="line">        [<span class="number">5</span>, -<span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">        [-<span class="number">4</span>, <span class="number">6</span>, -<span class="number">4</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, -<span class="number">4</span>, <span class="number">6</span>, -<span class="number">4</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">1</span>, -<span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    ]))</span><br><span class="line">    m = np.matrix(np.array([</span><br><span class="line">        [<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">    ]))</span><br><span class="line">    n = k.shape[<span class="number">0</span>]</span><br><span class="line">    eig_vals, eig_vecs = sp.linalg.eig(k, m)[:<span class="number">2</span>]</span><br><span class="line">    eig_vals = eig_vals.real</span><br><span class="line">    argsort = np.argsort(eig_vals)</span><br><span class="line">    eig_vals = [eig_vals[argsort[i]] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    eig_vecs_copy = eig_vecs.copy()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        eig_vecs[:, i] = eig_vecs_copy[:, argsort[i]]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;SciPy库：&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(eig_vals)</span><br><span class="line">    <span class="built_in">print</span>(eig_vecs)</span><br><span class="line"></span><br><span class="line">    eig_vals, eig_vecs = inverse_iteration_method1(k, m)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;方法1：&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;特征值：\n<span class="subst">&#123;eig_vals&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;特征向量：\n<span class="subst">&#123;eig_vecs&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    eig_vals, eig_vecs = inverse_iteration_method2(k, m)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;方法2：&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;特征值：\n<span class="subst">&#123;eig_vals&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;特征向量：\n<span class="subst">&#123;eig_vecs&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>程序输出如下： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SciPy库：</span><br><span class="line">[0.09653732854936428, 1.3914654511583402, 4.373549554582955, 10.638447665709336]</span><br><span class="line">[[-0.38576651  0.50215561 -0.55097093  0.11195372]</span><br><span class="line"> [-0.61138815  0.14033458  0.52342732 -0.26606756]</span><br><span class="line"> [-0.59120182 -0.55197537  0.02916661  0.75798869]</span><br><span class="line"> [-0.35758794 -0.65074507 -0.64931054 -0.58491672]]</span><br><span class="line">方法1：</span><br><span class="line">特征值：</span><br><span class="line">[ 0.09653733  1.39146545  4.37354955 10.63844769]</span><br><span class="line">特征向量：</span><br><span class="line">[[ 0.31262955  0.44526604  0.43866944 -0.10756245]</span><br><span class="line"> [ 0.49547586  0.12443555 -0.41674032  0.25563076]</span><br><span class="line"> [ 0.4791166  -0.48944215 -0.02322167 -0.72825456]</span><br><span class="line"> [ 0.28979328 -0.5770219   0.51696616  0.56197132]]</span><br><span class="line">方法2：</span><br><span class="line">特征值：</span><br><span class="line">[ 0.09653733  1.39146547  4.37354974 10.63844707]</span><br><span class="line">特征向量：</span><br><span class="line">[[ 0.31263514  0.44529746  0.43861285 -0.10764853]</span><br><span class="line"> [ 0.49547613  0.12439816 -0.41670087  0.25571251]</span><br><span class="line"> [ 0.47911154 -0.48944852 -0.023328   -0.72825001]</span><br><span class="line"> [ 0.28978869 -0.57698412  0.51712097  0.56186986]]</span><br></pre></td></tr></table></figure></p>
<p>可以看出，程序正确计算出了矩阵的全部特征值和特征向量。（特征向量因归一化方式不同，存在数字上的差异。若以相同的规则缩放，结果将相同）</p>
<h2 id="参考文献">参考文献</h2>
<p>[1]. Bathe K J. Finite element procedures[M]. Klaus-Jurgen Bathe, 2006.</p>
<p>[2]. 史蒂文・J.利昂著STEVENJ.LEON.线性代数[M].机械工业出版社,2015.</p>
<p>[3]. 朱伯芳.有限单元法原理与应用-第3版[M].中国水利水电出版社,2009.</p>
]]></content>
      <categories>
        <category>3.数值计算</category>
        <category>3.特征问题</category>
      </categories>
      <tags>
        <tag>特征值计算</tag>
        <tag>模态计算</tag>
        <tag>幂法</tag>
        <tag>逆幂法</tag>
        <tag>向量迭代法</tag>
        <tag>逆迭代法</tag>
      </tags>
  </entry>
  <entry>
    <title>线性方程组的解法——Cholesky分解</title>
    <url>/2024/04/06/%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84%E7%9A%84%E8%A7%A3%E6%B3%95%E2%80%94%E2%80%94Cholesky%E5%88%86%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="cholesky分解">Cholesky分解</h2>
<p>在科学和工程计算中，经常需要求解形如 <span class="math inline">\(\mathbf{A} \mathit{x} = \mathit{b}\)</span> 的线性方程组， 其中 <span class="math inline">\(\mathbf{A}\)</span> 为 <span class="math inline">\(n \times m\)</span> 矩阵，称为系数矩阵， <span class="math inline">\(\mathit{b}\)</span> 为 <span class="math inline">\(n\)</span> 维列向量，称为右端向量， <span class="math inline">\(\mathit{x}\)</span> 为待求解的 <span class="math inline">\(m\)</span> 维列向量，称为解向量。</p>
<p>而科学和工程的实际计算中，经常遇到系数矩阵 <span class="math inline">\(\mathbf{A}\)</span> 为对称正定矩阵的情况。若 <span class="math display">\[
\mathbf{A}=\begin{bmatrix}
    a_{11} \\ a_{21} &amp; a_{22}  &amp;  &amp; 对称\\
    a_{31} &amp; a_{32} &amp; a_{33} \\
    \vdots &amp; \vdots &amp; \vdots &amp; \ddots \\
    a_{n1} &amp; a_{n2} &amp; \dots &amp; a_{nn}
\end{bmatrix}
\]</span> 为正定阵，则有如下三角阵 <span class="math display">\[
\mathbf{L} = \begin{bmatrix}
    l_{11} \\
    l_{21} &amp; l_{22} &amp; &amp; \mathbf{0}\\
    l_{31} &amp; l_{32} &amp; l_{33} \\
    \vdots &amp; \vdots &amp; \vdots &amp; \ddots \\
    l_{n1} &amp; l_{n2} &amp; l_{n3} &amp; \dots &amp; l_{nn}
\end{bmatrix} \\
\]</span> 使 <span class="math inline">\(\mathbf{A} = \mathbf{L \cdot L^T}\)</span> 成立。若 <span class="math inline">\(\mathbf{L}\)</span> 的主对角线元素取正值，则这种分解是唯一的。</p>
<p>将矩阵关系式 <span class="math inline">\(\mathbf{A} = \mathbf{L \cdot L^T}\)</span> 直接展开，有 <span class="math display">\[
\begin{align*}
    a_{11} &amp;= l_{11}^{2} \\ 
    a_{21} &amp;= l_{21}l_{11},\quad a_{22} = l_{21}^{2}+l_{22}^{2}\\ 
    a_{31} &amp;= l_{31}l_{11},\quad a_{32} = l_{31}l_{21}+l_{32}l_{22},\quad a_{33}=l_{31}^{2}+l_{32}^{2}+l_{33}^{2}\\
    \dots
\end{align*}\\
\]</span></p>
<p>据此可逐行求出矩阵 <span class="math inline">\(\mathbf{L}\)</span> 的元素 <span class="math inline">\(l_{11} \rightarrow l_{21} \rightarrow l_{22} \rightarrow l_{31} \rightarrow l_{32} \rightarrow \dots\)</span>，计算公式为 <span class="math display">\[
\begin{cases}
    l_{ij} &amp;= (a_{ij} - \sum\limits_{k=1}^{j-1}l_{ik}l_{jk}) / l_{jj}, \quad &amp; j = 1, 2, \dots, i-1 \\
    l_{ii} &amp;= (a_{ii} - \sum\limits_{k=1}^{i-1}l_{ik}^2)^\frac{1}{2}, \quad &amp; i = 1, 2, \dots, n \\ \end{cases} \\
\]</span></p>
<p>基于矩阵分解式 <span class="math inline">\(\mathbf{A} = \mathbf{L \cdot L^T}\)</span>，对称正定方程组 <span class="math inline">\(\mathbf{A} \mathit{x} = \mathit{b}\)</span> 可归结为两个三角方程组 <span class="math inline">\(\mathbf{L} \mathit{y} = \mathit{b}\)</span> 和 <span class="math inline">\(\mathbf{L}^T \mathit{x} = \mathit{y}\)</span> 来求解。</p>
<p>由 <span class="math inline">\(\mathbf{L} \mathit{y} = \mathit{b}\)</span> 即 <span class="math display">\[
\begin{cases} l_{11}y_{1} &amp;= b_1 \\ l_{21}y_{2} + l_{22}y_{2} &amp;= b_2 \\ \dots \dots \dots \\ l_{n1}y_{1} + l_{n2}y_{2} + \dots + l_{nn}y_{n} &amp;= b_n \end{cases} \\
\]</span> 可顺序计算出 <span class="math inline">\(y_1 \rightarrow y_2 \rightarrow \dots \rightarrow y_n\)</span> ： <span class="math display">\[
y_i = (b_i - \sum\limits_{k=1}^{i-1}l_{ik}y_{k})/l_{ii}, \quad i = 1, 2, \dots,n \\
\]</span></p>
<p>而由 <span class="math inline">\(\mathbf{L}^T \mathit{x} = \mathit{y}\)</span> 即 <span class="math display">\[
\begin{cases}
    \begin{alignat*}{2}
    l_{11}x_1 + l_{21}x_2 + \dots + l_{n1}x_n &amp;= y_1 \\
    l_{22}x_2 + \dots + l_{n2}x_n &amp;= y_2 \\
    \dots \dots \dots \\
    l_{nn}x_n &amp;= y_n \\
    \end{alignat*}
\end{cases} \\
\]</span> 可逆序求得 <span class="math inline">\(x_n \rightarrow x_{n-1} \rightarrow \dots \rightarrow x_1\)</span>： <span class="math display">\[
x_i = (y_i - \sum\limits_{k=i+1}^nl_{ki}x_{k})/l_{ii}, \quad i = n, n-1, \dots, 1 \\
\]</span></p>
<p>由于矩阵分解时公式含有开方运算，所以该算法称为平方根法，又叫Cholesky分解法。</p>
<h2 id="代码实现fortran版">代码实现（Fortran版）</h2>
<p>根据上述公式，编写程序即可对方程进行求解：</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">subroutine</span></span> cholesky_full(n, a, y)</span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">intent</span>(<span class="keyword">in</span>) :: n</span><br><span class="line">    <span class="keyword">real</span>, <span class="keyword">intent</span>(inout) :: a(n, n), y(n)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">integer</span> :: i, j, k</span><br><span class="line">    <span class="keyword">real</span> :: temp</span><br><span class="line">    </span><br><span class="line">    <span class="comment">! 分解矩阵，生成下三角阵L</span></span><br><span class="line">    <span class="comment">! 工程问题中的很多矩阵非常庞大，所以，计算过程中的数据应该直接存放在原始数组a中，</span></span><br><span class="line">    <span class="comment">! 而不是新创建一个数组</span></span><br><span class="line">    <span class="keyword">do</span> i = <span class="number">1</span>, n</span><br><span class="line">        <span class="comment">! 公式中，j的取值范围为1到j-1，此处换成1到j，可以将分解式统一起来，省去一次判断。</span></span><br><span class="line">        <span class="comment">! 因为j=i时，j循环虽然会执行错误的操作、生成错误的a(i,j)结果，</span></span><br><span class="line">        <span class="comment">! 但a(i,j)马上就会被最外层的i循环生成的正确数据替换</span></span><br><span class="line">        <span class="keyword">do</span> j = <span class="number">1</span>, i</span><br><span class="line">            temp = a(i, j)</span><br><span class="line">            <span class="keyword">do</span> k = <span class="number">1</span>, j-<span class="number">1</span></span><br><span class="line">                temp = temp - a(i, k) * a(j, k)</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">            a(i, j) = temp / a(j, j)</span><br><span class="line">            <span class="comment">! a(j, i) = 0.  ! 对角线上方d的元素赋0，可有可无</span></span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">        a(i, i) = <span class="built_in">sqrt</span>(temp)</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">! 根据Ly=b求解出y</span></span><br><span class="line">    <span class="keyword">do</span> i = <span class="number">1</span>, n</span><br><span class="line">        temp = y(i)</span><br><span class="line">        <span class="keyword">do</span> j = <span class="number">1</span>, i-<span class="number">1</span></span><br><span class="line">            temp = temp - a(i, j) * y(j)</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">        y(i) = temp / a(i, i)</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">! 求解出x</span></span><br><span class="line">    <span class="keyword">do</span> i = n, <span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">        temp = y(i) / a(i, i)</span><br><span class="line">        y(i) = temp</span><br><span class="line">        <span class="comment">! 公式中k的范围为i+1到n，此处为1到i-1，因为下方a(i,k)的下标和公式中交换了顺序</span></span><br><span class="line">        <span class="keyword">do</span> k = <span class="number">1</span>, i-<span class="number">1</span></span><br><span class="line">            y(k) = y(k) - temp * a(i, k)</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">subroutine</span></span></span><br></pre></td></tr></table></figure>
<p>以上代码的Cholesky分解部分与前文公式基本上一致，很好理解，但引入了一个临时变量temp，用于存储数据。 而如果我们将j、k两层循环交换一下位置，再稍微调整一下循环计数器的取值范围，就可以不借助临时变量直接完成分解操作。 代码如下： <figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> i = <span class="number">1</span>, n</span><br><span class="line">    <span class="keyword">do</span> k = <span class="number">1</span>, i - <span class="number">1</span></span><br><span class="line">        a(i, k) = a(i, k) / a(k, k)</span><br><span class="line">        <span class="keyword">do</span> j = k + <span class="number">1</span>, i</span><br><span class="line">            a(i, j) = a(i, j) - a(i, k) * a(j, k)</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">    a(i, i) = <span class="built_in">sqrt</span>(a(i, i))</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">do</span></span><br></pre></td></tr></table></figure></p>
<h2 id="参考文献">参考文献</h2>
<p>[1].王能超. 高等学校教材, 数值分析简明教程, （第2版）[M]. 2003.</p>
<p>[2].吴建平, 王正华, 李晓梅. 稀疏线性方程组的高效求解与并行计算[M]. 湖南科学技术出版社, 2004.</p>
]]></content>
      <categories>
        <category>3.数值计算</category>
        <category>1.静力学方程</category>
        <category>1.直接解法</category>
      </categories>
      <tags>
        <tag>Cholesky分解</tag>
        <tag>平方根法</tag>
      </tags>
  </entry>
</search>
