<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>OCC+VTK显示CAD模型</title>
    <url>/2023/10/15/OCC-VTK%E6%98%BE%E7%A4%BACAD%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>早些时候，这篇文章已经被我发布在了知乎上：“<a href="https://zhuanlan.zhihu.com/p/455592800">VTK+OCC显示CAD模型</a>”，今天将文章重新编辑，发布在Github上，主要是为了测试Hexo的用法。</p>
<h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><ul>
<li>系统：Win11</li>
<li>IDE：Visual Studio Community 2019</li>
<li>VTK：VTK 9.2</li>
<li>OCC：OCCT 7.6</li>
</ul>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>VTK是一款十分优秀的可视化套件，开源且功能强大，基本上可以满足有限元领域的全部可视化需求。遗憾的是，VTK不支持CAD模型（如igs、stp格式的模型）的显示。</p>
<p>在网上搜索后可以发现，在不花钱的情况下，想要显示和处理CAD模型，基本上都得使用OpenCasCade，即OCC。OCC有自己的可视化系统，也可以集成在Qt中。但对我而已，OCC自己的可视化系统还是太复杂了。</p>
<p>好在OCC在6.8版本开发了VIS（VTK Integration Services）功能，之后的版本就可以使用VTK进行模型的可视化了。</p>
<p>为了使用VIS功能，编译OCC的时候需要选择USE_VTK的选项，编译完成后，将生成TKIVtk、TKIVtkDraw的动态库和静态库。如果编译路径下有这两个库，说明VIS的功能是编译成功了。</p>
<p>编写一个最小案例看看显示效果。</p>
<p>CMakeLists.txt文件：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.15</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(occvtk LANGUAGES CXX)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(VTK REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(OpenCASCADE REQUIRED)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;OpenCASCADE_INCLUDE_DIR&#125;</span>)</span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;OpenCASCADE_LIBRARY_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="keyword">test</span> <span class="keyword">test</span>.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="keyword">test</span></span><br><span class="line">    <span class="variable">$&#123;VTK_LIBRARIES&#125;</span></span><br><span class="line">    <span class="variable">$&#123;OpenCASCADE_LIBRARIES&#125;</span></span><br><span class="line">)</span><br><span class="line">vtk_module_autoinit(</span><br><span class="line">    TARGETS <span class="keyword">test</span></span><br><span class="line">    MODULES <span class="variable">$&#123;VTK_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>在此CMakeLists文件中，没有写死VTK和OCC的路径，而是使用find_package命令查找。如果没有找到，可以在命令行执行cmake命令时使用-D参数将相关路径传入:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake .. -DVTK_DIR:PATH=/home/me/vtk_build -DVTK_DIR -DOpenCASCADE_DIR:PATH=/home/me/occ_build</span><br></pre></td></tr></table></figure>

<p>test.cpp文件:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;STEPControl_Reader.hxx&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Standard_Integer.hxx&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TopoDS_Shape.hxx&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;IFSelect_ReturnStatus.hxx&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;IFSelect_PrintCount.hxx&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;IVtkTools_ShapeDataSource.hxx&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;IVtkOCC_ShapeMesher.hxx&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;IVtkTools_DisplayModeFilter.hxx&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkType.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkAutoInit.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkRenderWindow.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkActor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkRenderer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkRenderWindowInteractor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkPolyDataMapper.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkInteractorStyleTrackballCamera.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">VTK_MODULE_INIT</span>(vtkRenderingOpenGL2)</span><br><span class="line"><span class="built_in">VTK_MODULE_INIT</span>(vtkInteractionStyle)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STEPControl_Reader reader;</span><br><span class="line">    IFSelect_ReturnStatus stat = reader.<span class="built_in">ReadFile</span>(<span class="string">&quot;assembly_solid.stp&quot;</span>);</span><br><span class="line">    IFSelect_PrintCount mode = IFSelect_CountByItem;</span><br><span class="line">    Standard_Integer NbRoots = reader.<span class="built_in">NbRootsForTransfer</span>();</span><br><span class="line">    Standard_Integer num = reader.<span class="built_in">TransferRoots</span>();</span><br><span class="line">    Standard_Integer NbTrans = reader.<span class="built_in">TransferRoots</span>();</span><br><span class="line">    TopoDS_Shape result = reader.<span class="built_in">OneShape</span>();</span><br><span class="line">    <span class="comment">// TopoDS_Shape shape = reader.Shape();</span></span><br><span class="line"></span><br><span class="line">    vtkNew&lt;IVtkTools_ShapeDataSource&gt; occSource;</span><br><span class="line">    <span class="comment">//occSource-&gt;SetShape(new IVtkOCC_Shape(shape));</span></span><br><span class="line">    occSource-&gt;<span class="built_in">SetShape</span>(<span class="keyword">new</span> <span class="built_in">IVtkOCC_Shape</span>(result));</span><br><span class="line"></span><br><span class="line">    vtkNew&lt;IVtkTools_DisplayModeFilter&gt; filter;</span><br><span class="line">    filter-&gt;<span class="built_in">AddInputConnection</span>(occSource-&gt;<span class="built_in">GetOutputPort</span>());</span><br><span class="line">    filter-&gt;<span class="built_in">SetDisplayMode</span>(DM_Shading);</span><br><span class="line"></span><br><span class="line">    vtkNew&lt;vtkPolyDataMapper&gt; mapper;</span><br><span class="line">    mapper-&gt;<span class="built_in">SetInputConnection</span>(filter-&gt;<span class="built_in">GetOutputPort</span>());</span><br><span class="line"></span><br><span class="line">    vtkNew&lt;vtkActor&gt; actor;</span><br><span class="line">    actor-&gt;<span class="built_in">SetMapper</span>(mapper);</span><br><span class="line"></span><br><span class="line">    vtkNew&lt;vtkRenderer&gt; ren;</span><br><span class="line">    ren-&gt;<span class="built_in">AddActor</span>(actor);</span><br><span class="line"></span><br><span class="line">    vtkNew&lt;vtkRenderWindow&gt; renWin;</span><br><span class="line">    renWin-&gt;<span class="built_in">AddRenderer</span>(ren);</span><br><span class="line">    renWin-&gt;<span class="built_in">SetSize</span>(<span class="number">960</span>, <span class="number">800</span>);</span><br><span class="line"></span><br><span class="line">    vtkNew&lt;vtkInteractorStyleTrackballCamera&gt; istyle;</span><br><span class="line">    vtkNew&lt;vtkRenderWindowInteractor&gt; iren;</span><br><span class="line"></span><br><span class="line">    iren-&gt;<span class="built_in">SetRenderWindow</span>(renWin);</span><br><span class="line">    iren-&gt;<span class="built_in">SetInteractorStyle</span>(istyle);</span><br><span class="line"></span><br><span class="line">    renWin-&gt;<span class="built_in">Render</span>();</span><br><span class="line">    iren-&gt;<span class="built_in">Start</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此测试代码将模型文件“assembly_solid.stp”写死在了源代码中，编译完成后，需要确保可执行文件可以找到模型文件。</p>
<p>显示效果如下：</p>
<img src="/2023/10/15/OCC-VTK%E6%98%BE%E7%A4%BACAD%E6%A8%A1%E5%9E%8B/assembly.jpg" />
]]></content>
      <categories>
        <category>前后处理</category>
      </categories>
      <tags>
        <tag>OCC</tag>
        <tag>VTK</tag>
        <tag>可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>各种命令的笔记</title>
    <url>/2023/11/19/%E5%90%84%E7%A7%8D%E5%91%BD%E4%BB%A4%E7%9A%84%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h3><p>zip格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip filename.zip</span><br></pre></td></tr></table></figure>

<p>tar格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xvf filename.tar.xxx  <span class="comment"># 其中，xxx是gz、bz2、xz、z等后缀（1.15版之后可自动识别压缩格式）</span></span><br></pre></td></tr></table></figure>

<h3 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h3><p>查看磁盘空间：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -hl</span><br></pre></td></tr></table></figure>

<h2 id="Linux子系统（WSL）"><a href="#Linux子系统（WSL）" class="headerlink" title="Linux子系统（WSL）"></a>Linux子系统（WSL）</h2><p>移除子系统中的Windows环境变量（仅当次起效）:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PATH=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PATH</span>&quot;</span> | sed -e <span class="string">&#x27;s/:\/mnt.*//g&#x27;</span>) <span class="comment"># strip out problematic Windows %PATH% imported var</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>命令行</tag>
        <tag>命令</tag>
      </tags>
  </entry>
</search>
